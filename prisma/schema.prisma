//prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------- Enums ---------------
enum AnswerType {
  NONE
  CODE_SNIPPET
  FLOWCHART
  DIAGRAM
}

enum ExplanationBlockType {
  TEXT
  IMAGE
  VIDEO
}

// --------------- Core Models ---------------
model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String

  // Resources owned by User
  decks         Deck[]
  studyGuides   StudyGuide[]
  practiceTests PracticeTest[]
  documents     Document[]

  // Blog relationships
  blogComments BlogComment[]
  blogPosts    BlogPost[]

  // Resume-related
  resumes         Resume[]
  jobPostings     JobPosting[]
  tailoredResumes TailoredResume[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id       String  @id @default(uuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  fileName String
  mimeType String?
  fileData Bytes? // Or store an S3 link instead

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // If you want direct references from resources derived from this document:
  cards         Card[]
  studyGuides   StudyGuide[]
  practiceTests PracticeTest[]
}

model Topic {
  id             String  @id @default(uuid())
  name           String
  overview       String?
  cardsGenerated String?

  // Self-relation for subtopics
  parentTopicId String?
  parentTopic   Topic?  @relation("TopicHierarchy", fields: [parentTopicId], references: [id])
  subTopics     Topic[] @relation("TopicHierarchy")

  // Deck, Cards, StudyGuides, PracticeTests referencing this Topic
  deck          Deck[]         @relation("DeckTopic")
  cards         Card[]         @relation("TopicCards")
  studyGuides   StudyGuide[]   @relation("TopicStudyGuides")
  practiceTests PracticeTest[] @relation("TopicPracticeTests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------- Deck & Card ---------------
model Deck {
  id       String  @id @default(uuid())
  name     String
  isPublic Boolean @default(false)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  topicId String?
  topic   Topic?  @relation("DeckTopic", fields: [topicId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id              String   @id @default(uuid())
  authorName      String?
  question        String
  qrCodeGenerated Boolean?
  qrCodeUrl       String?

  // If topic-based
  topicId String?
  topic   Topic?  @relation("TopicCards", fields: [topicId], references: [id])

  // If document-based
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])

  // Basic answer data
  answer     String
  answerType AnswerType @default(NONE)

  // Instead of a "detailedExplanation" string, we point to a separate model
  explanation DetailedExplanation?

  resources         Json?
  examples          Json?
  DetailesGenerated String?
  isVerified        Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------- Explanation (for each Card) ---------------
model DetailedExplanation {
  id String @id @default(uuid())

  // 1-to-1 relation with Card
  cardId String @unique
  card   Card   @relation(fields: [cardId], references: [id])

  // Optional title or summary
  title String?

  // multiple blocks for structured text, images, or video links
  blocks ExplanationBlock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExplanationBlock {
  id            String              @id @default(uuid())
  explanationId String
  explanation   DetailedExplanation @relation(fields: [explanationId], references: [id])

  blockType  ExplanationBlockType
  blockTitle String?
  content    String? // For TEXT, this is text. For IMAGE/VIDEO, store the URL.

  // optional ordering if you want to specify the sequence
  order Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------- Study Guide & Sections ---------------
model StudyGuide {
  id String @id @default(uuid())

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  isPublic Boolean @default(false)

  topicId String?
  topic   Topic?  @relation("TopicStudyGuides", fields: [topicId], references: [id])

  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])

  title String // main title of the entire guide

  // Relationship to the sections for more structured content
  sections StudyGuideSection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudyGuideSection {
  id           String     @id @default(uuid())
  studyGuideId String
  studyGuide   StudyGuide @relation(fields: [studyGuideId], references: [id])

  // Example fields: heading, body, images, references, etc.
  order     Int?
  heading   String?
  body      String? // store markdown or plain text
  imageUrls String[] // for multiple image links (Postgres text[] by default)
  videoUrls String[] // for multiple video links (Postgres text[] by default)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------- Practice Test ---------------
model PracticeTest {
  id String @id @default(uuid())

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  isPublic Boolean @default(false)

  topicId String?
  topic   Topic?  @relation("TopicPracticeTests", fields: [topicId], references: [id])

  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])

  title        String
  instructions String?

  questions PracticeTestQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PracticeTestQuestion {
  id             String       @id @default(uuid())
  practiceTestId String
  practiceTest   PracticeTest @relation(fields: [practiceTestId], references: [id])

  question String
  answer   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------- Blog Post & Comments ---------------
model BlogPost {
  id            String  @id @default(uuid())
  slug          String  @unique
  topLevelImage String?
  header        String // main title
  tagline       String?

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Up to three paragraphs, you can expand if you need more
  paragraph1Title String?
  paragraph1      String?
  paragraph2Title String?
  paragraph2      String?
  paragraph3Title String?
  paragraph3      String?

  conclusion String?
  summary    String?
  endingNote String?

  comments BlogComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogComment {
  id      String @id @default(uuid())
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  blogPostId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------- Resume Models ---------------

// --------------- Resume Models ---------------
model Resume {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  name        String?
  city        String?
  state       String?
  zip         String?
  phone       String?
  email       String?
  linkedinUrl String?
  githubUrl   String?
  summary     String?

  education       Education[]
  experiences     Experience[]
  projects        Project[]
  skillGroups     SkillGroup[]
  tailoredResumes TailoredResume[]

  // ------------------------
  // NEW OPTIONAL RELATIONSHIPS
  // ------------------------
  achievements         Achievement[]
  certifications       Certification[]
  languages            Language[]
  volunteerExperiences VolunteerExperience[]
  references           Reference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  institution  String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?

  bulletPoints String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  roleTitle String
  company   String
  location  String?
  startDate DateTime?
  endDate   DateTime?

  responsibilities String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  title            String
  technologiesUsed String[]
  bulletPoints     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SkillGroup {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name   String
  skills String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------------------------------------
// NEW MODELS (OPTIONAL) FOR MORE FLEXIBILITY
// -------------------------------------------------------

// 1. Achievements / Awards
model Achievement {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  title        String // e.g. "Employee of the Month"
  bulletPoints String[] // e.g. highlights of the achievement

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 2. Certifications
model Certification {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name          String // e.g. "AWS Certified Solutions Architect"
  issuingBody   String? // e.g. "Amazon Web Services"
  issueDate     DateTime?
  expiryDate    DateTime?
  credentialId  String? // e.g. credential ID if applicable
  credentialUrl String? // e.g. link to verify certificate

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 3. Language Proficiency
model Language {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name        String // e.g. "English"
  proficiency String? // e.g. "Native", "Fluent", "Intermediate"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 4. Volunteer Experience
model VolunteerExperience {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  organizationName String
  roleTitle        String?
  location         String?
  startDate        DateTime?
  endDate          DateTime?

  bulletPoints String[] // e.g. main responsibilities or accomplishments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 5. References
model Reference {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name     String // reference's name
  phone    String?
  email    String?
  relation String? // e.g. "Former Manager"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPosting {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // The raw or initial text the user pasted
  initalListing String

  companyName    String?
  jobTitle       String?
  jobDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // If you want the reverse relation from JobPosting -> TailoredResume
  tailoredResumes TailoredResume[]
}

model TailoredResume {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  jobPostingId String
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])

  // The final curated resume content as text or markdown, etc.
  content String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
