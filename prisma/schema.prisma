datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AnswerType {
  NONE
  CODE_SNIPPET
  FLOWCHART
  DIAGRAM
}

enum ExplanationBlockType {
  TEXT
  IMAGE
  VIDEO
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String

  decks           Deck[]
  studyGuides     StudyGuide[]
  practiceTests   PracticeTest[]
  documents       Document[]
  blogComments    BlogComment[]
  blogPosts       BlogPost[]
  resumes         Resume[]
  jobPostings     JobPosting[]
  tailoredResumes TailoredResume[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id       String  @id @default(uuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  fileName String
  mimeType String?
  fileData Bytes?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards         Card[]
  studyGuides   StudyGuide[]
  practiceTests PracticeTest[]
}

model Topic {
  id             String  @id @default(uuid())
  name           String
  overview       String?
  cardsGenerated String?

  parentTopicId String?
  parentTopic   Topic?  @relation("TopicHierarchy", fields: [parentTopicId], references: [id])
  subTopics     Topic[] @relation("TopicHierarchy")

  deck          Deck[]         @relation("DeckTopic")
  cards         Card[]         @relation("TopicCards")
  studyGuides   StudyGuide[]   @relation("TopicStudyGuides")
  practiceTests PracticeTest[] @relation("TopicPracticeTests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deck {
  id       String  @id @default(uuid())
  name     String
  isPublic Boolean @default(false)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  topicId String?
  topic   Topic?  @relation("DeckTopic", fields: [topicId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id              String   @id @default(uuid())
  authorName      String?
  question        String
  qrCodeGenerated Boolean?
  qrCodeUrl       String?

  topicId String?
  topic   Topic?  @relation("TopicCards", fields: [topicId], references: [id])

  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])

  answer     String
  answerType AnswerType @default(NONE)

  explanation DetailedExplanation?

  resources         Json?
  examples          Json?
  DetailesGenerated String?
  isVerified        Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DetailedExplanation {
  id String @id @default(uuid())

  cardId String @unique
  card   Card   @relation(fields: [cardId], references: [id])

  title String?

  blocks ExplanationBlock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExplanationBlock {
  id            String              @id @default(uuid())
  explanationId String
  explanation   DetailedExplanation @relation(fields: [explanationId], references: [id])

  blockType  ExplanationBlockType
  blockTitle String?
  content    String?

  order Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudyGuide {
  id String @id @default(uuid())

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  isPublic Boolean @default(false)

  topicId String?
  topic   Topic?  @relation("TopicStudyGuides", fields: [topicId], references: [id])

  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])

  title String

  sections StudyGuideSection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudyGuideSection {
  id           String     @id @default(uuid())
  studyGuideId String
  studyGuide   StudyGuide @relation(fields: [studyGuideId], references: [id])

  order     Int?
  heading   String?
  body      String?
  imageUrls String[]
  videoUrls String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PracticeTest {
  id String @id @default(uuid())

  userId   String
  user     User    @relation(fields: [userId], references: [id])
  isPublic Boolean @default(false)

  topicId String?
  topic   Topic?  @relation("TopicPracticeTests", fields: [topicId], references: [id])

  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])

  title        String
  instructions String?

  questions PracticeTestQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PracticeTestQuestion {
  id             String       @id @default(uuid())
  practiceTestId String
  practiceTest   PracticeTest @relation(fields: [practiceTestId], references: [id])

  question String
  answer   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id            String  @id @default(uuid())
  slug          String  @unique
  topLevelImage String?
  header        String
  tagline       String?

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  paragraph1Title String?
  paragraph1      String?
  paragraph2Title String?
  paragraph2      String?
  paragraph3Title String?
  paragraph3      String?

  conclusion String?
  summary    String?
  endingNote String?

  comments BlogComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogComment {
  id      String @id @default(uuid())
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  blogPostId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPosting {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  initalListing String

  companyName    String?
  jobTitle       String?
  jobDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tailoredResumes TailoredResume[]
}

model Resume {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  name        String?
  city        String?
  state       String?
  zip         String?
  phone       String?
  email       String?
  linkedinUrl String?
  githubUrl   String?
  summary     String?

  education   Education[]
  experiences Experience[]
  projects    Project[]
  skillGroups SkillGroup[]

  tailoredResumes TailoredResume[]

  achievements         Achievement[]
  certifications       Certification[]
  languages            Language[]
  volunteerExperiences VolunteerExperience[]
  references           Reference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  institution  String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?

  bulletPoints String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  roleTitle String
  company   String
  location  String?
  startDate DateTime?
  endDate   DateTime?

  responsibilities String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  title            String
  technologiesUsed String[]
  bulletPoints     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SkillGroup {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name   String
  skills String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  title        String
  bulletPoints String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certification {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name          String
  issuingBody   String?
  issueDate     DateTime?
  expiryDate    DateTime?
  credentialId  String?
  credentialUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name        String
  proficiency String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VolunteerExperience {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  organizationName String
  roleTitle        String?
  location         String?
  startDate        DateTime?
  endDate          DateTime?

  bulletPoints String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reference {
  id       String @id @default(uuid())
  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  name     String
  phone    String?
  email    String?
  relation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredResume {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])

  jobPostingId String
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])

  name        String?
  city        String?
  state       String?
  zip         String?
  phone       String?
  email       String?
  linkedinUrl String?
  githubUrl   String?
  summary     String?

  tailoredEducation            TailoredEducation[]
  tailoredExperiences          TailoredExperience[]
  tailoredProjects             TailoredProject[]
  tailoredSkillGroups          TailoredSkillGroup[]
  tailoredAchievements         TailoredAchievement[]
  tailoredCertifications       TailoredCertification[]
  tailoredLanguages            TailoredLanguage[]
  tailoredVolunteerExperiences TailoredVolunteerExperience[]
  tailoredReferences           TailoredReference[]

  content String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredEducation {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  institution  String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?

  bulletPoints String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredExperience {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  roleTitle String
  company   String
  location  String?
  startDate DateTime?
  endDate   DateTime?

  responsibilities String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredProject {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  title            String
  technologiesUsed String[]
  bulletPoints     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredSkillGroup {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  name   String
  skills String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredAchievement {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  title        String
  bulletPoints String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredCertification {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  name          String
  issuingBody   String?
  issueDate     DateTime?
  expiryDate    DateTime?
  credentialId  String?
  credentialUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredLanguage {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  name        String
  proficiency String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredVolunteerExperience {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  organizationName String
  roleTitle        String?
  location         String?
  startDate        DateTime?
  endDate          DateTime?

  bulletPoints String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TailoredReference {
  id               String         @id @default(uuid())
  tailoredResumeId String
  tailoredResume   TailoredResume @relation(fields: [tailoredResumeId], references: [id])

  name     String
  phone    String?
  email    String?
  relation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
