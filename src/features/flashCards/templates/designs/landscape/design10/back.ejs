<!-- src/features/flashCards/newtemp/designs/landscape/design10/back.ejs -->
<style>
    /*
      Baroque Kaleidoscope (back) - Landscape layout:
      - swirling multi-layer background
      - lavish color transitions
      - baroque-inspired ornaments
      - large, extravagant text
    */
    .extreme10-back {
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      padding: 5%;
      position: relative;
      /* multi-layer swirling background in kaleidoscopic colors */
      background:
        radial-gradient(circle at 30% 30%, rgba(237,32,118,0.5), transparent 70%),
        radial-gradient(circle at 70% 70%, rgba(45,122,237,0.5), transparent 70%),
        linear-gradient(45deg, #ff007e, #00f6ff, #faff00, #ff00c8);
      background-size: cover;
      background-blend-mode: screen; /* slightly different from the front */
      font-family: "Copperplate Gothic Bold", "Times New Roman", serif;
      color: #fff;
      text-shadow: 2px 2px 3px #000;
      border: 6px double #000;
      border-radius: 15px;
      box-shadow: 0 0 20px rgba(0,0,0,0.8), 0 0 10px #fff inset;
  
      /* Rotate 180Â° for correct printing orientation (landscape) */
      transform: rotate(180deg);
      transform-origin: center center;
      overflow: hidden;
    }
  
    /*
      Ornate corner decor: fleur-de-lis in corners using pseudo-elements
      (mirroring front's corners, but positioned for the back).
    */
    .extreme10-back::before,
    .extreme10-back::after {
      content: "";
      position: absolute;
      width: 50px; 
      height: 50px;
      background: url("data:image/svg+xml,%3Csvg fill='%23fff' width='50' height='50' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 0c-1.657 0-3 1.343-3 3 0 1.281.885 2.363 2.084 2.77.026.103.05.207.07.316.09.473.146.94.146 1.398 0 .244-.01.486-.03.727-.314 3.647-3.416 5.332-3.416 7.969 0 1.656.942 3.09 2.295 3.868-.162.659-.416 1.536-.923 2.159-.641.787-1.417.793-1.775.795-.613.003-1.36.006-2.225.006v2c.865 0 1.612.003 2.225.006.978.004 1.885-.37 2.578-1.243.619-.76.902-1.702 1.115-2.545.197.009.394.015.59.015.196 0 .392-.006.59-.015.213.843.496 1.785 1.115 2.545.693.873 1.6 1.247 2.578 1.243.613-.003 1.36-.006 2.225-.006v-2c-.865 0-1.612-.003-2.225-.006-.358-.002-1.134-.009-1.775-.795-.507-.623-.761-1.501-.923-2.159 1.353-.778 2.295-2.212 2.295-3.868 0-2.637-3.102-4.321-3.416-7.969-.02-.241-.03-.483-.03-.727 0-.458.056-.925.146-1.398.02-.109.044-.213.07-.316 1.199-.407 2.084-1.489 2.084-2.77 0-1.657-1.343-3-3-3z'/%3E%3C/svg%3E") center/contain no-repeat;
      opacity: 0.8;
    }
    /* Place these in bottom corners for the back side */
    .extreme10-back::before {
      bottom: 0; left: 0;
      transform: rotate(270deg);
    }
    .extreme10-back::after {
      bottom: 0; right: 0;
      transform: rotate(180deg);
    }
  
    /*
      .extreme10-content: container for the answer & examples (manual scaling).
    */
    .extreme10-content {
      font-size: 1.2em;
      line-height: 1.3;
      text-shadow: 2px 2px 3px #000;
      position: relative;
      width: 100%;
      max-height: 100%;
      overflow: hidden;
    }
  
    /*
      Landscape layout approach:
        - If there's an example, show side by side (answer left, example right)
        - If no example, center the answer alone
    */
    .horizontal-layout {
      display: flex;
      justify-content: space-evenly;
      align-items: flex-start;
      width: 100%;
      height: 100%;
      box-sizing: border-box;
    }
    .answer-area,
    .example-area {
      width: 45%;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .centered-answer {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      height: 100%;
      box-sizing: border-box;
    }
  
    /*
      For scaling the main answer text:
      .answer-scale-wrapper -> .answer-scale-inner
    */
    .answer-scale-wrapper {
      width: 100%;
      display: flex;
      justify-content: center;
      position: relative;
    }
    .answer-scale-inner {
      display: inline-block;
      transform-origin: top center;
    }
  
    /* Main answer styling */
    .extreme10-answer {
      margin-top: 5%;
      text-align: center;
      font-size: 1.8em;
      font-weight: 900;
      letter-spacing: 2px;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 2px 2px 3px #000;
    }
  
    /* Example/notes area */
    .extreme10-example {
      text-align: center;
      margin-top: 4%;
      font-size: 1em;
      color: #fff;
      font-style: italic;
      text-shadow: 1px 1px 2px #000;
  
      /* Center child elements (e.g., code or images) */
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }
  
    /* Ensure code wraps lines so it won't overflow horizontally */
    pre.hljs,
    code.hljs {
      white-space: pre-wrap;
      word-wrap: break-word;
    }
  
    /*
      For code snippet/diagram scaling:
      .code-scale-wrapper -> .code-scale-inner
    */
    .code-scale-wrapper {
      position: relative;
      width: 100%;
      margin-top: 1em;
  
      display: flex;
      justify-content: center;
      align-items: flex-start;
    }
    .code-scale-inner {
      display: inline-block;
      transform-origin: top left;
    }
  
    @media print {
      .extreme10-back {
        -webkit-print-color-adjust: exact;
        print-color-adjust: exact;
      }
    }
  </style>
  
  <!-- BACK SIDE (Landscape Layout for Design10) -->
  <div class="extreme10-back">
    <div class="extreme10-content">
  
      <!-- Server-side logic to determine if example is present -->
      <%
        const hasCard = !!card;
        const atype = hasCard ? card.answerType : null;
        const examplesData = hasCard ? card.examples : null;
        const answerText = (card && card.answer) ? card.answer : 'No answer provided';
  
        let shouldShowExample = false;
        if (hasCard && examplesData) {
          if (
            atype === 'CODE_SNIPPET' ||
            atype === 'FLOWCHART' ||
            atype === 'DIAGRAM'
          ) {
            shouldShowExample = true;
          } else if (atype === undefined || atype === null) {
            // Possibly "regular" example text?
            shouldShowExample = true;
          }
        }
      %>
  
      <!-- If there's an example, side by side. Otherwise, center the answer. -->
      <% if (hasCard && atype !== 'NONE' && shouldShowExample) { %>
        <div class="horizontal-layout">
          <!-- ANSWER (Left side) -->
          <div class="answer-area">
            <div class="answer-scale-wrapper">
              <div class="answer-scale-inner">
                <h3 class="extreme10-answer"><%= answerText %></h3>
              </div>
            </div>
          </div>
  
          <!-- EXAMPLE (Right side) -->
          <div class="example-area">
            <div class="extreme10-example">
              <% 
                // highlightCode if provided
                const renderHighlighted = (rawCode) => {
                  if (typeof highlightCode === 'function') {
                    return highlightCode(rawCode);
                  }
                  return rawCode; // fallback
                };
  
                if (atype === 'CODE_SNIPPET') {
              %>
                <% if (Array.isArray(examplesData)) {
                    examplesData.forEach(ex => {
                      const codeContent = ex && ex.code ? ex.code : '';
                      const snippetHtml = renderHighlighted(codeContent);
                %>
                  <div class="code-scale-wrapper">
                    <div class="code-scale-inner">
                      <pre class="hljs"><code class="hljs"><%- snippetHtml %></code></pre>
                    </div>
                  </div>
                <%   });
                  } else {
                    const codeContent = (examplesData && examplesData.code)
                      ? examplesData.code 
                      : '';
                    const snippetHtml = renderHighlighted(codeContent);
                %>
                  <div class="code-scale-wrapper">
                    <div class="code-scale-inner">
                      <pre class="hljs"><code class="hljs"><%- snippetHtml %></code></pre>
                    </div>
                  </div>
                <% } %>
  
              <% } else if (atype === 'FLOWCHART' || atype === 'DIAGRAM') { %>
                <% if (typeof examplesData === 'string') { %>
                  <img src="<%= examplesData %>" alt="Flowchart/Diagram" style="max-width:100%;" />
                <% } else { %>
                  No valid image URL
                <% } %>
  
              <% } else { %>
                <!-- Default or "regular" example text -->
                <% if (Array.isArray(examplesData)) { %>
                  <%= examplesData.join(', ') %>
                <% } else { %>
                  <%= examplesData %>
                <% } %>
              <% } %>
            </div>
          </div>
        </div>
      <% } else { %>
        <!-- No example, so center the answer alone -->
        <div class="centered-answer">
          <div class="answer-scale-wrapper">
            <div class="answer-scale-inner">
              <h3 class="extreme10-answer"><%= answerText %></h3>
            </div>
          </div>
        </div>
      <% } %>
  
    </div><!-- END .extreme10-content -->
  
    <!-- SCALE-DOWN SCRIPT -->
    <script>
      (function() {
        /*
          We scale down both:
           1) The answer (.answer-scale-wrapper)
           2) Code snippet/diagram areas (.code-scale-wrapper)
          if content is bigger than the container.
        */
        const scaleWrappers = document.querySelectorAll(
          '.answer-scale-wrapper, .code-scale-wrapper'
        );
  
        scaleWrappers.forEach(wrapper => {
          const inner = wrapper.querySelector(
            '.answer-scale-inner, .code-scale-inner'
          );
          if (!inner) return;
  
          // Reset any transform
          inner.style.transform = '';
  
          // Measure container vs. content
          const wrapRect  = wrapper.getBoundingClientRect();
          const innerRect = inner.getBoundingClientRect();
  
          // Some bottom margin to avoid clipping
          const BOTTOM_MARGIN = 10;
          let usableHeight = wrapRect.height - BOTTOM_MARGIN;
          if (usableHeight < 0) usableHeight = 0;
  
          let scaleW = wrapRect.width  / innerRect.width;
          let scaleH = usableHeight    / innerRect.height;
          let scale = Math.min(scaleW, scaleH);
  
          // Only shrink if content is bigger
          if (scale < 1) {
            // Optionally enforce a minimum scale
            scale = Math.max(scale, 0.75);
            inner.style.transform = 'scale(' + scale + ')';
          }
        });
      })();
    </script>
  </div>
  