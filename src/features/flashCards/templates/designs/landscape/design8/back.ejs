<!-- src/features/flashCards/newtemp/designs/landscape/design8/back.ejs -->
<style>
    /*
      Botanical Flourish (back side) - Landscape Version:
      - pastel green background
      - subtle leaf motif
      - elegant script heading
    */
    .botanical-back {
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      position: relative;
      padding: 5%;
      background-color: #eaf4ec; /* pale pastel green */
      font-family: "Didot", "Georgia", serif;
      color: #2f4f4f;
      border: 2px dashed #7c9f94;
      border-radius: 6px;
  
      /* Rotate 180deg for printing orientation (landscape) */
      transform: rotate(180deg);
      transform-origin: center center;
      overflow: hidden;
    }
  
    /*
      Leaf flourish in top-left (rotated).
      We reuse the pseudo-element from design8 (front),
      flipping its orientation.
    */
    .botanical-back::after {
      content: "";
      position: absolute;
      width: 50px;
      height: 50px;
      background: url("data:image/svg+xml,%3Csvg width='50' height='50' viewBox='0 0 24 24' fill='%237c9f94' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M16.88 3.549C19.78 6.459 21.203 10.5 20.148 14.15c-1.064 3.791-4.162 6.375-8.611 6.375-4.156 0-6.256-2.967-6.589-3.441l2.074-1.54c0.004 0.005 1.573 2.126 4.515 2.126 3.004 0 5.061-1.68 5.795-4.267 0.78-2.776-0.307-5.957-2.328-7.979l1.875-1.875h0.002z'/%3E%3C/svg%3E")
                  no-repeat center / contain;
      opacity: 0.5;
      top: 0;
      left: 0;
      transform: rotate(180deg);
    }
  
    /*
      .botanical-content: container for answer + examples (manual scaling, no scrolling).
    */
    .botanical-content {
      font-size: 1em;
      line-height: 1.4;
      color: #2f4f4f;
      position: relative;
      width: 100%;
      max-height: 100%;
      overflow: hidden;
    }
  
    /*
      Landscape layout specifics:
        - If there's an example, answer on the left & example on the right
        - If no example, just center the answer
    */
    .horizontal-layout {
      display: flex;
      justify-content: space-evenly;
      align-items: flex-start;
      width: 100%;
      height: 100%;
      box-sizing: border-box;
    }
    .answer-area,
    .example-area {
      width: 45%;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .centered-answer {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      height: 100%;
      box-sizing: border-box;
    }
  
    /*
      For scaling the main answer text:
      .answer-scale-wrapper -> .answer-scale-inner
    */
    .answer-scale-wrapper {
      position: relative;
      width: 100%;
      display: flex;
      justify-content: center;
    }
    .answer-scale-inner {
      display: inline-block;
      transform-origin: top center;
    }
  
    /* Main answer styling */
    .botanical-answer {
      margin-top: 5%;
      text-align: center;
      font-size: 1.3em;
      font-family: "Allura", "Brush Script MT", cursive;
      color: #2f4f4f;
    }
  
    /* Example area styling */
    .botanical-example {
      text-align: center;
      margin-top: 4%;
      font-size: 0.9em;
      color: #4c7f6f;
      font-style: italic;
  
      /* Center code snippets or images */
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
  
    /* Ensure code wraps lines so it won't overflow horizontally */
    pre.hljs,
    code.hljs {
      white-space: pre-wrap;
      word-wrap: break-word;
    }
  
    /*
      For code snippet/diagram scaling:
      .code-scale-wrapper -> .code-scale-inner
    */
    .code-scale-wrapper {
      position: relative;
      width: 100%;
      margin-top: 1em;
  
      display: flex;
      justify-content: center;
      align-items: flex-start;
    }
    .code-scale-inner {
      display: inline-block;
      transform-origin: top left;
    }
  
    @media print {
      .botanical-back {
        -webkit-print-color-adjust: exact;
        print-color-adjust: exact;
      }
    }
  </style>
  
  <!-- BACK SIDE (Landscape Layout for Design8) -->
  <div class="botanical-back">
    <div class="botanical-content">
  
      <!-- Server-side logic for deciding if an example should be shown -->
      <%
        const hasCard = !!card;
        const atype = hasCard ? card.answerType : null;
        const examplesData = hasCard ? card.examples : null;
        const answerText = (card && card.answer) ? card.answer : 'No answer provided';
  
        let shouldShowExample = false;
        if (hasCard && examplesData) {
          if (
            atype === 'CODE_SNIPPET' ||
            atype === 'FLOWCHART' ||
            atype === 'DIAGRAM'
          ) {
            shouldShowExample = true;
          } else if (atype === undefined || atype === null) {
            // Possibly a "regular" example text
            shouldShowExample = true;
          }
        }
      %>
  
      <!-- If there's an example, display side-by-side. Otherwise, center the answer. -->
      <% if (hasCard && atype !== 'NONE' && shouldShowExample) { %>
        <div class="horizontal-layout">
          <!-- ANSWER (Left) -->
          <div class="answer-area">
            <div class="answer-scale-wrapper">
              <div class="answer-scale-inner">
                <h3 class="botanical-answer"><%= answerText %></h3>
              </div>
            </div>
          </div>
  
          <!-- EXAMPLE (Right) -->
          <div class="example-area">
            <div class="botanical-example">
              <% 
                // Use highlightCode if available
                const renderHighlighted = (rawCode) => {
                  if (typeof highlightCode === 'function') {
                    return highlightCode(rawCode);
                  }
                  return rawCode; // fallback
                };
  
                if (atype === 'CODE_SNIPPET') {
              %>
                <% if (Array.isArray(examplesData)) {
                    examplesData.forEach(ex => {
                      const codeContent = ex && ex.code ? ex.code : '';
                      const snippetHtml = renderHighlighted(codeContent);
                %>
                  <div class="code-scale-wrapper">
                    <div class="code-scale-inner">
                      <pre class="hljs"><code class="hljs"><%- snippetHtml %></code></pre>
                    </div>
                  </div>
                <%   });
                  } else {
                    const codeContent = (examplesData && examplesData.code)
                      ? examplesData.code
                      : '';
                    const snippetHtml = renderHighlighted(codeContent);
                %>
                  <div class="code-scale-wrapper">
                    <div class="code-scale-inner">
                      <pre class="hljs"><code class="hljs"><%- snippetHtml %></code></pre>
                    </div>
                  </div>
                <% } %>
  
              <% } else if (atype === 'FLOWCHART' || atype === 'DIAGRAM') { %>
                <% if (typeof examplesData === 'string') { %>
                  <img src="<%= examplesData %>" alt="Flowchart/Diagram" style="max-width:100%;" />
                <% } else { %>
                  No valid image URL
                <% } %>
  
              <% } else { %>
                <!-- Default or "regular" example text -->
                <% if (Array.isArray(examplesData)) { %>
                  <%= examplesData.join(', ') %>
                <% } else { %>
                  <%= examplesData %>
                <% } %>
              <% } %>
            </div>
          </div>
        </div>
      <% } else { %>
        <!-- Only answer (centered) -->
        <div class="centered-answer">
          <div class="answer-scale-wrapper">
            <div class="answer-scale-inner">
              <h3 class="botanical-answer"><%= answerText %></h3>
            </div>
          </div>
        </div>
      <% } %>
  
    </div> <!-- END .botanical-content -->
  
    <!-- SCALE-DOWN SCRIPT -->
    <script>
      (function() {
        /*
          We scale down both:
           1) The answer text area (.answer-scale-wrapper)
           2) The code snippet/diagram area (.code-scale-wrapper)
          if the content exceeds the container size.
        */
        const scaleWrappers = document.querySelectorAll(
          '.answer-scale-wrapper, .code-scale-wrapper'
        );
  
        scaleWrappers.forEach(wrapper => {
          const inner = wrapper.querySelector(
            '.answer-scale-inner, .code-scale-inner'
          );
          if (!inner) return;
  
          // Reset transforms
          inner.style.transform = '';
  
          // Measure container vs. content
          const wrapRect  = wrapper.getBoundingClientRect();
          const innerRect = inner.getBoundingClientRect();
  
          // Some bottom margin to avoid clipping
          const BOTTOM_MARGIN = 10;
          let usableHeight = wrapRect.height - BOTTOM_MARGIN;
          if (usableHeight < 0) usableHeight = 0;
  
          const scaleW = wrapRect.width  / innerRect.width;
          const scaleH = usableHeight    / innerRect.height;
          let scale  = Math.min(scaleW, scaleH);
  
          // Only shrink if content is bigger
          if (scale < 1) {
            // Optionally enforce a minimum scale
            scale = Math.max(scale, 0.75);
            inner.style.transform = 'scale(' + scale + ')';
          }
        });
      })();
    </script>
  </div>
  